import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-Tp5YifWS.js";const s={};function t(p,i){return a(),e("div",null,[...i[0]||(i[0]=[n(`<h1 id="在-leetcode-题型中使用-emce" tabindex="-1"><a class="header-anchor" href="#在-leetcode-题型中使用-emce"><span>在 LeetCode 题型中使用 EMCE</span></a></h1><p>EMCE 可以理解为 “更细化、结构化的 MECE”，帮助你在刷题时做到全面覆盖 + 精准拆解 + 高效复用。</p><hr><h2 id="一、emce-拆解框架" tabindex="-1"><a class="header-anchor" href="#一、emce-拆解框架"><span>一、EMCE 拆解框架</span></a></h2><ol><li><p>E - Explicit 分类（明确分类）</p><ul><li><p>按题目类型、数据结构、算法特点分类</p></li><li><p>例：</p><ul><li>数组类：Two Sum, Sliding Window, Subarray</li><li>链表类：Reverse Linked List, Merge K Lists</li><li>树/图类：DFS/BFS, Binary Tree Traversal</li><li>动态规划类：LCS, Coin Change</li></ul></li></ul></li><li><p>M - Mutually Exclusive（互斥）</p><ul><li>保证分类不重叠</li><li>例：同一个题只归入“数组滑动窗口”或“数组前缀和”，不重复分类</li></ul></li><li><p>C - Collectively Exhaustive（完全穷尽）</p><ul><li><p>尽量覆盖 LeetCode 常见题型和边界情形</p></li><li><p>例：数组题覆盖：</p><ul><li>单指针 / 双指针 / 滑动窗口</li><li>前缀和 / 差分 / 哈希表</li><li>排序 / 分治</li></ul></li></ul></li><li><p>E - Edge Cases / Extensions（边界与拓展）</p><ul><li>每个题型进一步分析边界情况、变体题、优化方法</li><li>例：Two Sum → 有序数组 → 双指针</li><li>例：Subarray Sum → 有负数 → 前缀和 + 哈希表</li></ul></li></ol><hr><h2 id="二、应用步骤" tabindex="-1"><a class="header-anchor" href="#二、应用步骤"><span>二、应用步骤</span></a></h2><h3 id="步骤-1-题型归类-explicit-me" tabindex="-1"><a class="header-anchor" href="#步骤-1-题型归类-explicit-me"><span>步骤 1：题型归类（Explicit + ME）</span></a></h3><ul><li>先把题目按 数据结构 + 算法思路 分类</li><li>互斥，不重复</li><li>示例：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>数组题</span></span>
<span class="line"><span>├─ 双指针类</span></span>
<span class="line"><span>├─ 前缀和类</span></span>
<span class="line"><span>├─ 滑动窗口类</span></span>
<span class="line"><span>└─ 排序 / 二分类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤-2-全面覆盖-ce" tabindex="-1"><a class="header-anchor" href="#步骤-2-全面覆盖-ce"><span>步骤 2：全面覆盖（CE）</span></a></h3><ul><li><p>确保每类题型至少覆盖：</p><ul><li>基本题</li><li>边界题</li><li>高阶题</li></ul></li><li><p>示例：双指针类</p><ul><li>两数之和 II（有序数组）</li><li>三数之和</li><li>盛最多水的容器</li></ul></li></ul><h3 id="步骤-3-分析边界与拓展-edge-cases-extensions" tabindex="-1"><a class="header-anchor" href="#步骤-3-分析边界与拓展-edge-cases-extensions"><span>步骤 3：分析边界与拓展（Edge Cases / Extensions）</span></a></h3><ul><li><p>对每道题做拆解模板：</p><ol><li>输入规模（空数组、1个元素、极大数组）</li><li>值域边界（负数、0、极大值）</li><li>时间复杂度优化（O(n^2 → O(n log n → O(n)））</li><li>变体题目（题型拓展或高级版本）</li></ol></li></ul><h3 id="步骤-4-形成解题模板" tabindex="-1"><a class="header-anchor" href="#步骤-4-形成解题模板"><span>步骤 4：形成解题模板</span></a></h3><ul><li>每个题型形成 逻辑结构化模板：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>双指针模板：</span></span>
<span class="line"><span>1. 初始化左右指针 i, j</span></span>
<span class="line"><span>2. 循环条件 i &lt; j</span></span>
<span class="line"><span>3. 根据题目逻辑移动指针</span></span>
<span class="line"><span>4. 处理重复 / 边界</span></span>
<span class="line"><span>5. 返回结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、案例-数组题-two-sum-two-sum-ii" tabindex="-1"><a class="header-anchor" href="#三、案例-数组题-two-sum-two-sum-ii"><span>三、案例：数组题 “Two Sum / Two Sum II”</span></a></h2><ol><li><p>Explicit：数组类 → 双指针 / 哈希表</p></li><li><p>Mutually Exclusive：分两类处理</p><ul><li>无序数组 → 哈希表</li><li>有序数组 → 双指针</li></ul></li><li><p>Collectively Exhaustive：覆盖所有情况</p><ul><li>正数 / 负数 / 0</li><li>空数组 / 单元素 / 多解</li></ul></li><li><p>Edge Cases / Extensions：</p><ul><li>多对组合</li><li>返回下标或值</li><li>拓展到 Three Sum、四数之和</li></ul></li></ol><blockquote><p>通过 EMCE，你不仅能快速定位算法模板，还能全面考虑边界和优化策略。</p></blockquote><hr><h2 id="四、emce-在刷题复盘的作用" tabindex="-1"><a class="header-anchor" href="#四、emce-在刷题复盘的作用"><span>四、EMCE 在刷题复盘的作用</span></a></h2><ol><li><p>提高题型覆盖率</p><ul><li>确保每种题型都复习到位，不遗漏</li></ul></li><li><p>提升复用效率</p><ul><li>形成模板 → 新题快速套用</li></ul></li><li><p>降低思维混乱</p><ul><li>遇到复杂题可快速拆解到子模块</li></ul></li><li><p>系统性提升</p><ul><li>从题目分类到边界、优化形成闭环，构建你的“LeetCode 知识地图”</li></ul></li></ol><hr><h2 id="五、实战建议" tabindex="-1"><a class="header-anchor" href="#五、实战建议"><span>五、实战建议</span></a></h2><ol><li><p>按数据结构+算法分类做 EMCE 表格</p><ul><li>行：题型</li><li>列：方法、边界、优化、拓展</li></ul></li><li><p>刷题时做模板</p><ul><li>每道题完成后，填充 EMCE 表格</li></ul></li><li><p>定期复盘</p><ul><li>检查 CE 是否覆盖，ME 是否重复，Edge 是否遗漏</li></ul></li><li><p>形成个人题型库</p><ul><li>基于 EMCE 的知识库，刷新题时快速定位模板</li></ul></li></ol><hr><p>总结一句话：</p><blockquote><p>EMCE = 题型清晰分类 + 全面覆盖 + 互斥拆解 + 边界拓展 → 系统化刷题思维模型</p></blockquote>`,30)])])}const d=l(s,[["render",t]]),c=JSON.parse('{"path":"/posts/think-model/2025-08-24-think-model-part2-methods-05-leetcode-with-mece.html","title":"MECE 与逻辑结构化在 leetcode 中的实战","lang":"zh-CN","frontmatter":{"title":"MECE 与逻辑结构化在 leetcode 中的实战","date":"2025-08-24T00:00:00.000Z","categories":["Think-Model"],"tags":["think-model","thinking","sh"],"published":true,"description":"在 LeetCode 题型中使用 EMCE EMCE 可以理解为 “更细化、结构化的 MECE”，帮助你在刷题时做到全面覆盖 + 精准拆解 + 高效复用。 一、EMCE 拆解框架 E - Explicit 分类（明确分类） 按题目类型、数据结构、算法特点分类 例： 数组类：Two Sum, Sliding Window, Subarray 链表类：Re...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MECE 与逻辑结构化在 leetcode 中的实战\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-24T11:45:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/lmxxf-thinking/posts/think-model/2025-08-24-think-model-part2-methods-05-leetcode-with-mece.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"MECE 与逻辑结构化在 leetcode 中的实战"}],["meta",{"property":"og:description","content":"在 LeetCode 题型中使用 EMCE EMCE 可以理解为 “更细化、结构化的 MECE”，帮助你在刷题时做到全面覆盖 + 精准拆解 + 高效复用。 一、EMCE 拆解框架 E - Explicit 分类（明确分类） 按题目类型、数据结构、算法特点分类 例： 数组类：Two Sum, Sliding Window, Subarray 链表类：Re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-24T11:45:51.000Z"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"thinking"}],["meta",{"property":"article:tag","content":"think-model"}],["meta",{"property":"article:published_time","content":"2025-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-24T11:45:51.000Z"}]]},"git":{"createdTime":1756035951000,"updatedTime":1756035951000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"posts/think-model/2025-08-24-think-model-part2-methods-05-leetcode-with-mece.md","excerpt":"\\n<p>EMCE 可以理解为 “更细化、结构化的 MECE”，帮助你在刷题时做到全面覆盖 + 精准拆解 + 高效复用。</p>\\n<hr>\\n<h2>一、EMCE 拆解框架</h2>\\n<ol>\\n<li>\\n<p>E - Explicit 分类（明确分类）</p>\\n<ul>\\n<li>\\n<p>按题目类型、数据结构、算法特点分类</p>\\n</li>\\n<li>\\n<p>例：</p>\\n<ul>\\n<li>数组类：Two Sum, Sliding Window, Subarray</li>\\n<li>链表类：Reverse Linked List, Merge K Lists</li>\\n<li>树/图类：DFS/BFS, Binary Tree Traversal</li>\\n<li>动态规划类：LCS, Coin Change</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>M - Mutually Exclusive（互斥）</p>\\n<ul>\\n<li>保证分类不重叠</li>\\n<li>例：同一个题只归入“数组滑动窗口”或“数组前缀和”，不重复分类</li>\\n</ul>\\n</li>\\n<li>\\n<p>C - Collectively Exhaustive（完全穷尽）</p>\\n<ul>\\n<li>\\n<p>尽量覆盖 LeetCode 常见题型和边界情形</p>\\n</li>\\n<li>\\n<p>例：数组题覆盖：</p>\\n<ul>\\n<li>单指针 / 双指针 / 滑动窗口</li>\\n<li>前缀和 / 差分 / 哈希表</li>\\n<li>排序 / 分治</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>E - Edge Cases / Extensions（边界与拓展）</p>\\n<ul>\\n<li>每个题型进一步分析边界情况、变体题、优化方法</li>\\n<li>例：Two Sum → 有序数组 → 双指针</li>\\n<li>例：Subarray Sum → 有负数 → 前缀和 + 哈希表</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,c as data};
