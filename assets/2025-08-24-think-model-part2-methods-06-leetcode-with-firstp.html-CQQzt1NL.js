import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,o as t}from"./app-Tp5YifWS.js";const n={};function p(s,e){return t(),l("div",null,[...e[0]||(e[0]=[a(`<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>力扣题目动不动就几千题，我们全部刷一遍不现实。</p><p>刷了忘记，每个题目不同还是会在掉坑里。</p><p>如何通过 第一性原理 来分析如何刷题？如何解决问题呢？</p><p>痛点是：LeetCode 题量巨大 → 刷题效率低 → 容易忘题 → 每道题似乎都不同 → 很容易掉坑。</p><h1 id="通过第一性原理分析刷题问题" tabindex="-1"><a class="header-anchor" href="#通过第一性原理分析刷题问题"><span>通过第一性原理分析刷题问题</span></a></h1><p>用第一性原理来分析刷题问题，可以帮你找到本质解决方案，而不是机械刷题。</p><h2 id="一、回到问题本质" tabindex="-1"><a class="header-anchor" href="#一、回到问题本质"><span>一、回到问题本质</span></a></h2><h3 id="_1-为什么刷题" tabindex="-1"><a class="header-anchor" href="#_1-为什么刷题"><span>1. 为什么刷题？</span></a></h3><ul><li><p>表面目标：刷题提升算法和编码能力</p></li><li><p>第一性问题：</p><ol><li>技能提升：学习算法思想、数据结构应用、问题分析能力</li><li>思维训练：训练逻辑拆解、抽象能力、解决问题思维</li><li>经验积累：形成解题模板，减少未来遇到类似题的认知负担</li></ol></li></ul><blockquote><p>核心不是刷“数量”，而是技能和思维的沉淀。</p></blockquote><h3 id="_2-刷题难点分析" tabindex="-1"><a class="header-anchor" href="#_2-刷题难点分析"><span>2. 刷题难点分析</span></a></h3><ul><li>数量巨大 → 不可能全部刷</li><li>忘记题目 → 记忆不系统</li><li>每题不同 → 不知道复用哪种思路</li><li>掉坑 → 缺少解题框架</li></ul><p>用第一性原理拆解：</p><ol><li>目标 = 技能提升 + 思维训练 + 模板积累</li><li>障碍 = 题量大、知识碎片化、记忆难、缺乏结构</li><li>问题本质 = 如何用最少的题量获得最大能力提升？</li></ol><hr><h2 id="二、用第一性原理思考刷题策略" tabindex="-1"><a class="header-anchor" href="#二、用第一性原理思考刷题策略"><span>二、用第一性原理思考刷题策略</span></a></h2><h3 id="_1-明确能力要素" tabindex="-1"><a class="header-anchor" href="#_1-明确能力要素"><span>1. 明确能力要素</span></a></h3><p>把刷题能力拆解到底层“原子技能”：</p><ul><li>算法思维：DFS/BFS、二分查找、动态规划、贪心、分治</li><li>数据结构能力：数组、链表、栈、队列、哈希表、堆、树、图</li><li>逻辑结构化：问题分析 → 分类 → 拆解 → 实现</li><li>代码能力：快速实现 + 边界处理 + 时间复杂度优化</li></ul><blockquote><p>结论：刷题本质是能力训练，而不是刷题量。</p></blockquote><h3 id="_2-构建题型映射" tabindex="-1"><a class="header-anchor" href="#_2-构建题型映射"><span>2. 构建题型映射</span></a></h3><p>用最小题量覆盖能力：</p><ul><li>按 数据结构 × 算法 建立矩阵</li><li>每个“格子”选 1~2 道代表题</li><li>例：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>          DFS  BFS  DP  Greedy</span></span>
<span class="line"><span>Array     -    -    1    1</span></span>
<span class="line"><span>Linked    1    -    -    -</span></span>
<span class="line"><span>Tree      1    1    1    -</span></span>
<span class="line"><span>Graph     1    1    -    -</span></span>
<span class="line"><span>Heap      -    -    -    1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>核心思想：最少题量覆盖全部技能点</p></blockquote><h3 id="_3-模板化" tabindex="-1"><a class="header-anchor" href="#_3-模板化"><span>3. 模板化</span></a></h3><ul><li><p>每类题型形成解题模板：</p><ul><li>输入 → 数据结构 → 算法 → 边界 → 输出</li></ul></li><li><p>遇到新题 → 套用模板 → 快速解题</p></li><li><p>第一性原则：把复杂题目降解到最小不可分解元素 → 模板化</p></li></ul><h3 id="_4-复盘与归纳" tabindex="-1"><a class="header-anchor" href="#_4-复盘与归纳"><span>4. 复盘与归纳</span></a></h3><ul><li><p>每题做完，不只关注是否 AC</p></li><li><p>归纳：</p><ul><li>算法思想</li><li>数据结构使用</li><li>边界处理和优化</li></ul></li><li><p>形成自己的知识库</p></li><li><p>第一性原则：把每道题的知识抽象为最本质的规律，而不是单题记忆</p></li></ul><hr><h2 id="三、刷题实践策略" tabindex="-1"><a class="header-anchor" href="#三、刷题实践策略"><span>三、刷题实践策略</span></a></h2><ol><li><p>优先高价值题</p><ul><li>根据第一性原理：选择最能覆盖能力点的题，而非数量</li><li>例如：Two Sum、三数之和、最大子数组和 → 覆盖数组 + 哈希/双指针 + 贪心/前缀和</li></ul></li><li><p>模板化解题</p><ul><li>每类算法/数据结构 → 形成标准模板</li><li>新题先匹配模板，再调整细节</li></ul></li><li><p>高频题复盘</p><ul><li>用 EMCE 或矩阵方式归类</li><li>定期复盘，强化记忆 → 防止遗忘</li></ul></li><li><p>反思与优化</p><ul><li>对复杂题拆解原因 → 哪些技能点未掌握</li><li>第一性原则 → 聚焦能力缺口，不盲刷</li></ul></li></ol><hr><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结"><span>四、总结</span></a></h2><ul><li><p>刷题的第一性目标：训练算法思维 + 数据结构能力 + 模板化解决问题</p></li><li><p>本质问题：不是题量，而是如何最大化能力沉淀</p></li><li><p>解决方案：</p><ol><li>按能力拆解 → 建立题型覆盖矩阵</li><li>模板化 → 套用解题框架</li><li>归纳复盘 → 形成系统知识库</li><li>定期复盘 → 防止遗忘、优化技能</li></ol></li></ul><blockquote><p>核心思路：回到本质，刷题不刷量，而刷“能力 + 模板 + 系统”</p></blockquote>`,37)])])}const h=i(n,[["render",p]]),d=JSON.parse('{"path":"/posts/think-model/2025-08-24-think-model-part2-methods-06-leetcode-with-firstp.html","title":"第一性原理在 leetcode 中的实战","lang":"zh-CN","frontmatter":{"title":"第一性原理在 leetcode 中的实战","date":"2025-08-24T00:00:00.000Z","categories":["Think-Model"],"tags":["think-model","thinking","sh"],"published":true,"description":"背景 力扣题目动不动就几千题，我们全部刷一遍不现实。 刷了忘记，每个题目不同还是会在掉坑里。 如何通过 第一性原理 来分析如何刷题？如何解决问题呢？ 痛点是：LeetCode 题量巨大 → 刷题效率低 → 容易忘题 → 每道题似乎都不同 → 很容易掉坑。 通过第一性原理分析刷题问题 用第一性原理来分析刷题问题，可以帮你找到本质解决方案，而不是机械刷题。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一性原理在 leetcode 中的实战\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-24T11:45:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/lmxxf-thinking/posts/think-model/2025-08-24-think-model-part2-methods-06-leetcode-with-firstp.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"第一性原理在 leetcode 中的实战"}],["meta",{"property":"og:description","content":"背景 力扣题目动不动就几千题，我们全部刷一遍不现实。 刷了忘记，每个题目不同还是会在掉坑里。 如何通过 第一性原理 来分析如何刷题？如何解决问题呢？ 痛点是：LeetCode 题量巨大 → 刷题效率低 → 容易忘题 → 每道题似乎都不同 → 很容易掉坑。 通过第一性原理分析刷题问题 用第一性原理来分析刷题问题，可以帮你找到本质解决方案，而不是机械刷题。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-24T11:45:51.000Z"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"thinking"}],["meta",{"property":"article:tag","content":"think-model"}],["meta",{"property":"article:published_time","content":"2025-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-24T11:45:51.000Z"}]]},"git":{"createdTime":1756035951000,"updatedTime":1756035951000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"posts/think-model/2025-08-24-think-model-part2-methods-06-leetcode-with-firstp.md","excerpt":"\\n<p>力扣题目动不动就几千题，我们全部刷一遍不现实。</p>\\n<p>刷了忘记，每个题目不同还是会在掉坑里。</p>\\n<p>如何通过 第一性原理 来分析如何刷题？如何解决问题呢？</p>\\n<p>痛点是：LeetCode 题量巨大 → 刷题效率低 → 容易忘题 → 每道题似乎都不同 → 很容易掉坑。</p>\\n<h1>通过第一性原理分析刷题问题</h1>\\n<p>用第一性原理来分析刷题问题，可以帮你找到本质解决方案，而不是机械刷题。</p>\\n<h2>一、回到问题本质</h2>\\n<h3>1. 为什么刷题？</h3>\\n<ul>\\n<li>\\n<p>表面目标：刷题提升算法和编码能力</p>\\n</li>\\n<li>\\n<p>第一性问题：</p>\\n<ol>\\n<li>技能提升：学习算法思想、数据结构应用、问题分析能力</li>\\n<li>思维训练：训练逻辑拆解、抽象能力、解决问题思维</li>\\n<li>经验积累：形成解题模板，减少未来遇到类似题的认知负担</li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
